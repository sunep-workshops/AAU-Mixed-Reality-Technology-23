// source:
// 

[Category("Filter")]
[Summary("")]
shader OpticalFlow_TextureFX : TextureFX
{
 
#define PI 3.14159265358979
 
	float2 poffset = float2(1.0f, 1.0f);
	float lambda = 0.0f;
	float2 scale = float2(1.0f,1.0f);
	float2 direction = float2(1.0f,-1.0f);

    stage override float4 Shading()
    {	
		float2 uv = streams.TexCoord;
		float2 resol = 1/Texture0TexelSize;
		float4 a = Texture1.Sample(Sampler0,uv);
		float4 b = Texture0.Sample(Sampler0,uv);
		float DepthT = Texture2.Sample(Sampler0, uv).r;
		float Depth2T = Texture3.Sample(Sampler0, uv).r;
		float Mask = Texture4.Sample(Sampler0, uv).r;
		//float2 offset = poffset;
		float2 offset = poffset/resol;
		float2 nx = float2(offset.x, 0.0f);
		float2 ny = float2(0.0f, offset.y);
	
		float4 CurrentDifference = b-a;

		float4 GradientX = ((Texture1.Sample(Sampler0,uv + nx) - Texture1.Sample(Sampler0,uv - nx)) + (Texture0.Sample(Sampler0,uv + nx) - Texture0.Sample(Sampler1,uv - nx)))/2.;
		float4 GradientY = ((Texture1.Sample(Sampler0,uv + ny) - Texture1.Sample(Sampler0,uv - ny)) + (Texture0.Sample(Sampler0,uv + ny) - Texture0.Sample(Sampler0,uv - ny)))/2.;
		
		float4 GradientMagnitude = sqrt( (GradientX*GradientX)+(GradientY*GradientY)+float4(lambda, lambda, lambda, lambda));

		float4 VelocityX = CurrentDifference * direction.x*(GradientX/GradientMagnitude);
		float4 VelocityY = CurrentDifference * direction.y*(GradientY/GradientMagnitude);

		float vxd = VelocityX.r; // assumes greyscale
		
		float vyd = VelocityY.r; // assumes greyscale
		
		float4 c= float4(vxd * scale.x,vyd * scale.y,0,1);//xout,yout);//float4(xout, yout);
		
		c.b=DepthT;
		c.rg*=Depth2T;	
		if (Mask>0) c.rg=0;
	
		
		
		return c;

       

        

    }
};